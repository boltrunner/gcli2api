name: Nightly Release

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    name: Build cross-platform binaries
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          check-latest: true
          cache: true

      - name: Build binaries (linux/darwin/windows, amd64/arm64)
        shell: bash
        run: |
          set -euo pipefail
          app_name="gcli2api"
          mkdir -p dist
          platforms=(
            "linux/amd64"
            "linux/arm64"
            "darwin/arm64"
            "windows/amd64"
          )
          for plat in "${platforms[@]}"; do
            IFS=/ read -r GOOS GOARCH <<<"$plat"
            ext=""
            archive_ext="tar.gz"
            if [ "$GOOS" = "windows" ]; then ext=".exe"; archive_ext="zip"; fi
            bin="dist/${app_name}_${GOOS}_${GOARCH}${ext}"
            echo "Building $bin"
            CGO_ENABLED=0 GOOS="$GOOS" GOARCH="$GOARCH" go build -trimpath -ldflags "-s -w" -o "$bin" .
            pkg="dist/${app_name}_${GOOS}_${GOARCH}.${archive_ext}"
            if [ "$archive_ext" = "zip" ]; then
              (cd dist && zip -q "$(basename "$pkg")" "$(basename "$bin")")
              rm -f "$bin"
            else
              (cd dist && tar -czf "$(basename "$pkg")" "$(basename "$bin")")
              rm -f "$bin"
            fi
          done
          # Checksums
          if command -v sha256sum >/dev/null 2>&1; then
            (cd dist && sha256sum * > SHA256SUMS.txt)
          else
            (cd dist && shasum -a 256 * > SHA256SUMS.txt)
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/*

  release:
    name: Create/Update nightly release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist

      - name: Create or update release and upload assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          sha7="${GITHUB_SHA::7}"
          tag="nightly-${sha7}"
          title="nightly-${sha7}"

          # Create the release if it doesn't exist
          if gh release view "$tag" >/dev/null 2>&1; then
            echo "Release $tag exists; will update assets."
          else
            gh release create "$tag" \
              --title "$title" \
              --notes "Automated nightly build for commit $GITHUB_SHA" \
              --prerelease
          fi

          # Upload/overwrite assets
          gh release upload "$tag" dist/* --clobber

